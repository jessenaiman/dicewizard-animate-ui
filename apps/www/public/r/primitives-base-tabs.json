{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "primitives-base-tabs",
  "type": "registry:ui",
  "title": "Base Tabs",
  "description": "A component for toggling between related panels on the same page.",
  "dependencies": [
    "motion",
    "@base-ui-components/react"
  ],
  "registryDependencies": [
    "@animate-ui/primitives-effects-auto-height",
    "@animate-ui/primitives-effects-highlight",
    "@animate-ui/lib-get-strict-context",
    "@animate-ui/hooks-use-controlled-state"
  ],
  "files": [
    {
      "path": "registry/primitives/base/tabs/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { Tabs as TabsPrimitive } from '@base-ui-components/react/tabs';\nimport {\n  motion,\n  AnimatePresence,\n  type HTMLMotionProps,\n  type Transition,\n} from 'motion/react';\n\nimport {\n  Highlight,\n  HighlightItem,\n  type HighlightProps,\n  type HighlightItemProps,\n} from '@/components/animate-ui/primitives/effects/highlight';\nimport { getStrictContext } from '@/lib/get-strict-context';\nimport { useControlledState } from '@/hooks/use-controlled-state';\nimport {\n  AutoHeight,\n  type AutoHeightProps,\n} from '@/components/animate-ui/primitives/effects/auto-height';\n\ntype TabsContextType = {\n  value: string | undefined;\n  setValue: TabsProps['onValueChange'];\n};\n\nconst [TabsProvider, useTabs] =\n  getStrictContext<TabsContextType>('TabsContext');\n\ntype TabsProps = React.ComponentProps<typeof TabsPrimitive.Root>;\n\nfunction Tabs(props: TabsProps) {\n  const [value, setValue] = useControlledState({\n    value: props.value,\n    defaultValue: props.defaultValue,\n    onChange: props.onValueChange,\n  });\n\n  return (\n    <TabsProvider value={{ value, setValue }}>\n      <TabsPrimitive.Root\n        data-slot=\"tabs\"\n        {...props}\n        onValueChange={setValue}\n      />\n    </TabsProvider>\n  );\n}\n\ntype TabsHighlightProps = Omit<HighlightProps, 'controlledItems' | 'value'>;\n\nfunction TabsHighlight({\n  transition = { type: 'spring', stiffness: 200, damping: 25 },\n  ...props\n}: TabsHighlightProps) {\n  const { value } = useTabs();\n\n  return (\n    <Highlight\n      data-slot=\"tabs-highlight\"\n      controlledItems\n      value={value}\n      transition={transition}\n      click={false}\n      {...props}\n    />\n  );\n}\n\ntype TabsListProps = React.ComponentProps<typeof TabsPrimitive.List>;\n\nfunction TabsList(props: TabsListProps) {\n  return <TabsPrimitive.List data-slot=\"tabs-list\" {...props} />;\n}\n\ntype TabsHighlightItemProps = HighlightItemProps & {\n  value: string;\n};\n\nfunction TabsHighlightItem(props: TabsHighlightItemProps) {\n  return <HighlightItem data-slot=\"tabs-highlight-item\" {...props} />;\n}\n\ntype TabsTabProps = React.ComponentProps<typeof TabsPrimitive.Tab>;\n\nfunction TabsTab(props: TabsTabProps) {\n  return <TabsPrimitive.Tab data-slot=\"tabs-tab\" {...props} />;\n}\n\ntype TabsPanelProps = React.ComponentProps<typeof TabsPrimitive.Panel> &\n  HTMLMotionProps<'div'>;\n\nfunction TabsPanel({\n  value,\n  keepMounted,\n  transition = { duration: 0.5, ease: 'easeInOut' },\n  ...props\n}: TabsPanelProps) {\n  return (\n    <AnimatePresence mode=\"wait\">\n      <TabsPrimitive.Panel\n        render={\n          <motion.div\n            data-slot=\"tabs-panel\"\n            layout\n            layoutDependency={value}\n            initial={{ opacity: 0, filter: 'blur(4px)' }}\n            animate={{ opacity: 1, filter: 'blur(0px)' }}\n            exit={{ opacity: 0, filter: 'blur(4px)' }}\n            transition={transition}\n            {...props}\n          />\n        }\n        keepMounted={keepMounted}\n        value={value}\n      />\n    </AnimatePresence>\n  );\n}\n\ntype TabsPanelsAutoProps = Omit<AutoHeightProps, 'children'> & {\n  mode?: 'auto-height';\n  children: React.ReactNode;\n  transition?: Transition;\n};\n\ntype TabsPanelsLayoutProps = Omit<HTMLMotionProps<'div'>, 'children'> & {\n  mode: 'layout';\n  children: React.ReactNode;\n  transition?: Transition;\n};\n\ntype TabsPanelsProps = TabsPanelsAutoProps | TabsPanelsLayoutProps;\n\nconst defaultTransition: Transition = {\n  type: 'spring',\n  stiffness: 200,\n  damping: 30,\n};\n\nfunction isAutoMode(props: TabsPanelsProps): props is TabsPanelsAutoProps {\n  return !props.mode || props.mode === 'auto-height';\n}\n\nfunction TabsPanels(props: TabsPanelsProps) {\n  const { value } = useTabs();\n\n  if (isAutoMode(props)) {\n    const { children, transition = defaultTransition, ...autoProps } = props;\n\n    return (\n      <AutoHeight\n        data-slot=\"tabs-panels\"\n        deps={[value]}\n        transition={transition}\n        {...autoProps}\n      >\n        <React.Fragment key={value}>{children}</React.Fragment>\n      </AutoHeight>\n    );\n  }\n\n  const {\n    children,\n    style,\n    transition = defaultTransition,\n    ...layoutProps\n  } = props;\n\n  return (\n    <motion.div\n      data-slot=\"tabs-panels\"\n      layout=\"size\"\n      layoutDependency={value}\n      transition={{ layout: transition }}\n      style={{ overflow: 'hidden', ...style }}\n      {...layoutProps}\n    >\n      <React.Fragment key={value}>{children}</React.Fragment>\n    </motion.div>\n  );\n}\n\nexport {\n  Tabs,\n  TabsHighlight,\n  TabsHighlightItem,\n  TabsList,\n  TabsTab,\n  TabsPanel,\n  TabsPanels,\n  type TabsProps,\n  type TabsHighlightProps,\n  type TabsHighlightItemProps,\n  type TabsListProps,\n  type TabsTabProps,\n  type TabsPanelProps,\n  type TabsPanelsProps,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/primitives/base/tabs.tsx"
    }
  ]
}